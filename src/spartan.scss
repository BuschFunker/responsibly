/**
 * "Spartan" Grid System
 * version: 5.0.0
 * https://github.com/SimonHarte/SpartanGrid
 * License: MIT
 * Copyright 2015 Simon Harte <s.harte@gmx.ch>
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GRID VARIABLE INIT

$spartan-namespace: null !default;
$spartan-width: null !default;
$spartan-gutter: null !default;
$spartan-cols: null !default;
$spartan-one-col: null !default;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS

// _pow() - Raise number to the nth power
//
// @param {number} $base      The base number
// @param {number} $exponents The exponent to which to raise $base
@function _pow($base, $exponents) {
	$raised: 1;

	@for $i from 1 through $exponents {
		$raised: $raised * $base;
	}

	@return $raised;
}

// _strip-unit() - from https://css-tricks.com/snippets/sass/strip-unit-function/
@function _strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@function _get-rounded($val, $type: 'round') {
	// Float precision used for rounding is the most important variable because we get different behaviours over browsers
	// and certain grid container widths. Note that rounding issues only exist for width and padding style properties.
	//
	// There are two factors to consider when adjusting the precision:
	// - precision value itself
	// - using round(), floor() or ceil() to calculate width and padding (column gutter)
	//
	// Tests have shown these behaviours:
	//
	// - Using precision < 3:
	//     - We get inaccurate values with round(), floor(), and ceil()
	// - Using precision = 3:
	//     - We get inaccurate values in Safari when using floor(),
	//     - We get inaccurate values with round() and ceil() which leads to jumping columns,
	//       with round() starting in containers larger than ~800px (FF)
	// - Using precision = 4:
	//     - We get inaccurate values in Safari when using round() and floor()
	//     - We get an overall good behaviour when using ceil(),
	//       columns will start jumping in containers larger than ~2200px (FF)
	// - Using precision > 4:
	//     - We get inaccurate values in Safari with round() and floor()
	//     - We get an overall good behaviour when using ceil()
	//
	// Recommendation:
	// Using a float precision of 5 together with ceil() seems to be the smallest possible,
	// most accurate amount for a future-proof grid system.
	$precision: 5;

	@if $type == 'ceil' {
		@return ceil($val * _pow(10, $precision)) / _pow(10, $precision);
	} @else if $type == 'floor' {
		@return floor($val * _pow(10, $precision)) / _pow(10, $precision);
	} @else {
		@return round($val * _pow(10, $precision)) / _pow(10, $precision);
	}
}

@function _get-gutter($type, $width, $gutter) {
	@if $type == 'fluid'and unit($gutter) !='%' {
		@return percentage($gutter / $width);
	} @else {
		@return $gutter;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GRID LOGIC MIXINS

// "local" mixins
@mixin _spartan-span-width($num) {
	width: _get-rounded($spartan-one-col * $num, 'ceil');
}

@mixin _spartan-indent($num) {
	margin-left: _get-rounded($spartan-one-col * $num) !important;
}

@mixin _spartan-push($num) {
	left: _get-rounded($spartan-one-col * $num);
}

@mixin _spartan-pull($num) {
	right: _get-rounded($spartan-one-col * $num);
}

// "global" mixins
@mixin grid-span($num: 0) {
	@if $num > 0 {
		@include _spartan-span-width($num);
	}
}

@mixin grid-offset($num: 0) {
	@include _spartan-indent($num);
}

@mixin grid-push($num: 0) {
	@if $num > 0 {
		@include _spartan-push($num);
	}
}

@mixin grid-pull($num: 0) {
	@if $num > 0 {
		@include _spartan-pull($num);
	}
}

@mixin grid-reorder($num: 0) {
	@if $num >= 0 {
		@include grid-push($num);
	} @else {
		@include grid-pull(abs($num));
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LAYOUT SETUP HELPERS

// You can use the following mixins to easily set up responsive layouts.
// For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes.
//
// .col-set([colum name], [column span width], [offset], [order]):
// Standard mixin to set up a column in a responsive layout.
// You can optionally pass an offset and reorder parameter to apply indentation or use push and pull on a column.
//
// To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
//
// .col-set-equal([column span width]):
// Extended mixin to set up equal width columns and properly clear them at the same time
//
// Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
//       Because else the `nth-of-type` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
//       other viewports/media queries in the layout.
//
// .col-clear([colums per line]):
// Use this to manually clear every nth column if columns differ in height.
// This ensures that a grid layout can have only [colums per line] columns on one horizontal grid line.

// clear every new grid line, see issue in "before" state here: http://stackoverflow.com/questions/3628311/css-floating-divs-with-different-height-are-aligned-with-space-between-them
@mixin grid-col-clear($columns) {
	$col-integer: floor($columns);

	& > .#{$spartan-namespace}col:nth-of-type(#{$col-integer}n+1) {
		clear: left;
	}
}

// standard mixin for setting column styles
@mixin grid-col-set($col-name, $col-span: 0, $offset: 0, $reorder: 0) {
	& > .#{$spartan-namespace}#{$col-name} {
		@if $col-span > 0 {
			@include grid-span($col-span);
		}
		@if $offset != 0 {
			@include grid-offset($offset);
		}
		@if $reorder != 0 {
			@include grid-reorder($reorder);
		}
	}
}

// predefined col class with width and proper clearing
@mixin grid-col-set-equal($col-span) {
	$col-clear: $spartan-cols / $col-span;

	// use default col-set mixin to generate selector
	@include grid-col-set('col', $col-span);

	// with equal columns, clear every nth element for proper alignment
	@include grid-col-clear($col-clear);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GRID GUTTER

// "local" mixins
@mixin _spartan-row-gutter($gutter) {
	margin-left: _get-rounded(-$gutter) !important;
}

// assuming px, em
@mixin _spartan-col-gutter($gutter) {
	@if unit($gutter) == '%' {
		// column gutter has to be slightly smaller with percentage value because container is bigger
		padding-left: _get-rounded(percentage($gutter / (100% + $gutter)), 'ceil') !important;
	} @else {
		padding-left: _get-rounded($gutter, 'ceil') !important;
	}
}

@mixin _spartan-gutter-styles($row-gutter, $col-gutter) {
	&.#{$spartan-namespace}row {
		@include _spartan-row-gutter($row-gutter);
	}

	.#{$spartan-namespace}col {
		@include _spartan-col-gutter($col-gutter);
	}
}

// "global" mixins
@mixin grid-gutter($arg1: $spartan-gutter, $arg2: null) {
	$_width: null;
	$_gutter: null;

	@if $arg2 {
		$_width: $arg1;
		$_gutter: $arg2;
	} @else {
		$_gutter: $arg1;
	}

	@if $_width {
		@if unit($_gutter) == '%' {
			// width is given but gutter is percentage anyway
			@include _spartan-gutter-styles($_gutter, $_gutter);
		} @else {
			@if comparable($_width, $_gutter) {
				// width is given and gutter is the same unit
				@include _spartan-gutter-styles(percentage(_strip-unit($_gutter) / _strip-unit($_width)), percentage(_strip-unit($_gutter) / _strip-unit($_width + $_gutter)));
			} @else {
				@error 'width and gutter units must be the same to calculate percentage';
			}
		}
	} @else {
		// take gutter as is
		@include _spartan-gutter-styles($_gutter, $_gutter);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE STYLES

// "local" mixins
@mixin _spartan-cf {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin _spartan-bm($sizing: border-box) {
	box-sizing: $sizing;
}

@mixin _spartan-base-style($item) {
	@if $item == 'both' {
		display: block;
		// make sure no shorthand properties interfere with grid styles
		margin-right: 0 !important;
		padding-right: 0 !important;
	}
	@if $item == 'row' {
		@include _spartan-cf;
		padding-left: 0 !important;
	}
	@if $item == 'col' {
		@include _spartan-bm;
		float: left;
		margin-left: 0 !important;
		// columns should per default span the whole width if none is set
		width: 100%;
		min-height: 1px;
	}
}

@mixin _spartan-row-reorder {
	> .#{$spartan-namespace}col {
		position: relative;
	}
}

// base grid layout styles, valid for every grid setup
@mixin _spartan-core-selectors {
	.#{$spartan-namespace}row,
	.#{$spartan-namespace}col {
		@include _spartan-base-style('both');
	}

	.#{$spartan-namespace}row {
		@include _spartan-base-style('row');

		// used to .push and .pull columns
		&.#{$spartan-namespace}reorder {
			@include _spartan-row-reorder;
		}
	}

	.#{$spartan-namespace}col {
		@include _spartan-base-style('col');
	}
}

// "global" mixins
@mixin grid-core($ns: 'g', $generate: true) {
	$spartan-namespace: $ns !global;

	@if $spartan-namespace != '' {
		$spartan-namespace: #{$spartan-namespace}- !global;
	}

	@if $generate {
		@include _spartan-core-selectors;
	}
}

// all necessary row styles with gutter
@mixin grid-row($gutter: $spartan-gutter) {
	@include _spartan-base-style('both');
	@include _spartan-base-style('row');
	@include _spartan-row-gutter($gutter);
}

// all necessary column styles with gutter
@mixin grid-col($gutter: $spartan-gutter) {
	@include _spartan-base-style('both');
	@include _spartan-base-style('col');
	@include _spartan-col-gutter($gutter);
}

@mixin grid-row-reorder() {
	@include _spartan-row-reorder;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GENERATE BASE CLASSES

@mixin _spartan-apply($selector, $index) {
	@if $selector == 'span' {
		@include grid-span($index);
	}
	@if $selector == 'offset' {
		@include grid-offset($index);
	}
	@if $selector == 'push' {
		@include grid-push($index);
	}
	@if $selector == 'pull' {
		@include grid-pull($index);
	}
}

@mixin grid-generate($prefix: '', $columns: $spartan-cols) {
	@if $prefix != '' {
		$prefix: '#{$prefix}-';
	}

	$selector: #{$spartan-namespace}#{$prefix};
	$classes: span offset push pull;

	@each $class in $classes {
		@for $i from 1 to $columns {
			.#{$selector}#{$class}-#{$i} {
				@include _spartan-apply($class, $i);
			}
		}
	}
}

@mixin grid-unlock($config) {
	$spartan-width: nth($config, 1) !global;
	$spartan-gutter: nth($config, 2) !global;
	$spartan-cols: nth($config, 3) !global;
	$spartan-one-col: $spartan-width / $spartan-cols !global;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DO EVERYTHING AT ONCE

@mixin grid-bundle($config, $ns: 'g') {
	@include grid-core($ns);
	@include grid-unlock($config);
	@include grid-gutter();
	@include grid-generate();
}