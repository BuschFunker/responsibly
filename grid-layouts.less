// MEDIA QUERIES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@phone: ~'(max-width: 600px)';
@tablet: ~'(min-width: 601px) and (max-width: 900px)';
@tablet-and-down: ~'(max-width: 900px)';
@tablet-and-up: ~'(min-width: 601px)';
@desktop: ~'(min-width: 901px)';

// LAYOUT SETUP HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * You can use the following mixins to easily set up responsive layouts.
 * For grid layouts with different span sizes use incrementing col-[num] classes and apply sizes to these classes.
 *
 * .col-clear([colums per line]):
 * Used to clear every nth child element to make sure columns align properly if not the same height.
 *
 * .col-set([colum name], [column span width]):
 * Standard mixin to set up a column in a responsive layout.
 * This mixin will generate the given class name with the given span width.
 *
 * .col-set-equal([column span width]):
 * Extended mixin to set up equal width columns and properly clear them at the same time.
 * This mixin will generate the default .col class with the given span width.
 *
 *
 * Note: In layouts created with .col-set-equal() you must distinguish between viewports
 *       because different nth-child selectors could interfere within the same layout.
 *       (no mobile first approach)
 **/

.col-clear(@columns) {
	> .col:nth-child(@{columns}n+1) {
		clear: left;
	}
}

.col-set(@col-name; @col-span) {
	> .@{col-name} {
		.col-span(@col-span);
	}
}

.col-set-equal(@col-span) {
	@clear: @grid-max-cols / @col-span;
	
	// use default col-set mixin to generate selector
	.col-set(col; @col-span);
	
	// with equal columns, clear every nth element for proper alignment
	.col-clear(@clear);
}


// RESPONSIVE LAYOUTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

.layout-responsive-1 {
	/**
	* specs: max cols 12
	* desktop: 4
	* tablet: 6
	* phone: 12
	**/

	@media @phone {
		.col-set-equal(4);
	}

	@media @tablet {
		.col-set-equal(6);
	}

	@media @desktop {
		.col-set-equal(12);
	}
}

.layout-responsive-2 {
	/**
	* specs: max cols 12
	* desktop: 6
	* tablet: 12
	* phone: 12
	**/

	@media @tablet-and-down {
		.col-set-equal(12);
	}

	@media @desktop {
		.col-set-equal(6);
	}
}

.layout-responsive-3 {
	/**
	* specs:
	* desktop: 8/4
	* tablet: 8/4
	* phone: 12
	**/

	@media @phone {
		.col-set-equal(12);
	}

	@media @tablet-and-up {
		.col-set(col-1; 8);

		.col-set(col-2; 4);
	}
}

.layout-responsive-4 {
	/**
	* specs:
	* desktop: 3
	* tablet: 6
	* phone: 12
	**/

	@media @phone {
		.col-set-equal(12);
	}

	@media @tablet {
		.col-set-equal(6);
	}

	@media @desktop {
		.col-set-equal(3)
	}
}