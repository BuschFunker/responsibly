// Content oriented media queries //
@reading-length: 40em;

// breakpoints
@m-small-max: @reading-length;
@m-medium-min: (@reading-length + .01);
@m-medium-max: (@reading-length*2);
@m-large-min: (@reading-length*2 + .01);

// queries
@m-small: ~"(max-width: @{m-small-max})";
@m-medium: ~"(min-width: @{m-medium-min}) and (max-width: @{m-medium-max})";
@m-medium-up: ~"(min-width: @{m-medium-min})";
@m-medium-down: ~"(max-width: @{m-medium-max})";
@m-large: ~"(min-width: @{m-large-min})";

/**
* You can use the following mixins to easily set up responsive layouts.
* For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes:
*
* .grid-col-set([column name], [column span width], [column offset]):
* Standard mixin to set up a column in a responsive layout
*
* To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
*
* .grid-col-set-equal([column span width]):
* Extended mixin to set up equal width columns and properly clear them at the same time
*
* Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
* Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
* other viewports/media queries in the layout.
*
* .grid-col-clear([columns per line]):
* Use this to manually clear every nth column if columns differ in height.
* This ensures that a grid layout can have only [columns per line] columns on one horizontal grid line.
*
**/

// layouts //

.g-layout-1 {
	// small: 12
	// medium: 6
	// large: 4

	@media @m-medium {
		.grid-col-set-equal(6);
	}

	@media @m-large {
		.grid-col-set-equal(4);
	}
}

.g-layout-2 {
	// small: 12
	// medium: 12
	// large: 6

	@media @m-large {
		.grid-col-set-equal(6);
	}
}

.g-layout-3 {
	// small: 12
	// medium: 8/4
	// large: 8/4

	@media @m-medium-up {
		.grid-col-set(col-1, 8);
		.grid-col-set(col-2, 4);
	}
}

.g-layout-4 {
	// small: 12
	// medium: 6 offset 6
	// large: 4 offset 8

	@media @m-small {
		.grid-col-set(col, 4, 8);
	}

	@media @m-medium {
		.grid-col-set(col, 6, 6);
	}
}

.g-layout-nogrid {
	// small: 5
	// medium: 7
	// large: 9
	
	// variable @spartan-grid-max-cols gets defined by the grid
	
	@media @m-small {
		.grid-col-set(col, (@spartan-grid-max-cols / 5));
	}

	@media @m-medium {
		.grid-col-set(col, (@spartan-grid-max-cols / 7));
	}

	@media @m-large {
		.grid-col-set(col, (@spartan-grid-max-cols / 9));
	}
}