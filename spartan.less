// GRID CALCULATIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Note: We use !important statements for grid layout critical styles.
//       Like this you can define for example margin shorthands on a column without affecting the grid indentation.

.spartan-grid() {
	// multiple mixins switch according to passed types
	// any other value than 'fixed' is assumed as fluid

	// mixin for standard fluid grid with fluid gutter
	.spartan-create('fluid', 'fluid', @fixed-width, @fixed-gutter, @cols) {
		@width: 100%;

		// fluid gutter is calculated relatively to the static gutter in fixed grid width
		@row-gutter: round(percentage(@fixed-gutter / @fixed-width), @grid-precision);
		// percentage column gutter has to be slightly bigger than row indent because row indent changes the container width
		@true-gutter: round(percentage(@fixed-gutter / (@fixed-width + @fixed-gutter)), @grid-precision);

		// calculate the width of one grid column
		@one-col: (@width - @true-gutter * @cols) / @cols;

		// implement grid mixins with type dependent variables
		.spartan-grid > .spartan-grid-mixins(@width, @row-gutter, @true-gutter, @one-col);
	}

	// mixin for fluid grid type and fixed gutter type
	.spartan-create('fluid', 'fixed', @fixed-width, @fixed-gutter, @cols) {
		@width: 100%;

		// calculate the width of one grid column
		@one-col: (@width / @cols);

		// implement grid mixins with type dependent variables
		.spartan-grid > .spartan-grid-mixins(@width, @fixed-gutter, @one-col, 'fixed-gutter');
	}

	// only one mixin for fixed grid type needed because we cannot make fluid gutters in static grid
	.spartan-create('fixed', @gutter-type, @fixed-width, @fixed-gutter, @cols) {
		@width: @fixed-width;
		@gutter: @fixed-gutter;

		// calculate the width of one grid column
		// add one gutter to grid width because of negative indent
		@one-col: ((@width + @gutter) - @gutter * @cols) / @cols;

		// implement grid mixins with type dependent variables
		// gutter passed twice because in fluid (percentage) grid column gutter is slightly bigger than row indent
		.spartan-grid > .spartan-grid-mixins(@width, @gutter, @gutter, @one-col);
	}

	// pass grid variables from global scope (defined in config)
	// to our switch mixin which manipulates/creates variables
	// this mixin is also our unlocker to use #grid > .mixins() as usual

	.spartan-grid > .spartan-create(@grid-type, @grid-gutter-type, @grid-fixed-width, @grid-fixed-gutter, @grid-max-cols);

	// fluid gutter grid mixins which get called with manipulated variables from unlocker
	.spartan-grid-mixins(@width, @row-gutter, @gutter, @one-col) when (isnumber(@one-col)) {
		.spartan-span-width(@num) when (@num > 0) {
			width: round((@one-col * @num) + (@gutter * @num), @grid-precision);
		}

		// indent grid columns either way with these mixins
		.spartan-indent(@num: 0) when (@num >= 0) {
			margin-left: round((@one-col * @num) + (@gutter * @num), @grid-precision);
		}

		// negative indent can only be used in a fixed grid system and sadly not be generated with the loop
		// still, you can use this mixin if the need occurs
		.spartan-indent(@num: -1) when (@num < 0) {
			margin-left: -round((@one-col * @num) + (@gutter * @num), @grid-precision);
		}

		// used only on .col for uniquely applied gutter
		.spartan-col-indent(@num: 0) when (@num >= 0) {
			padding-left: @gutter !important;
		}

		// used only on .row for proper negative indent in fluid grid
		.spartan-row-indent(@num: 0) {
			margin-left: -@row-gutter;
		}

		// visually manipulate grid column order with these mixins
		.spartan-push(@num) when (@num >= 0) {
			left: round((@one-col * @num) + (@gutter * @num), @grid-precision);
		}

		.spartan-pull(@num) when (@num >= 0) {
			right: round((@one-col * @num) + (@gutter * @num), @grid-precision);
		}
	}

	// fixed gutter grid mixins which get called with manipulated variables from unlocker
	.spartan-grid-mixins(@width, @gutter, @one-col, 'fixed-gutter') {
		.spartan-span-width(@num) when (@num > 0) {
			width: round((@one-col * @num), @grid-precision);
		}

		// indent grid columns either way with these mixins
		.spartan-indent(@num: 0) {
			margin-left: round((@one-col * @num), @grid-precision);
		}

		// used only on .col for uniquely applied gutter
		.spartan-col-indent(@num: 0) {
			padding-left: @gutter !important;
		}

		// used only on .row for proper negative indents
		.spartan-row-indent(@num: 0) {
			margin-left: -@gutter;
		}

		// visually manipulate grid column order with these mixins
		.spartan-push(@num) when (@num >= 0) {
			left: round((@one-col * @num), @grid-precision);
		}

		.spartan-pull(@num) when (@num >= 0) {
			right: round((@one-col * @num), @grid-precision);
		}
	}

	// less loop to generate grid classes
	.spartan-loop (@index, @class: item, @mixin: '') when (@index > 0) {
		// create the actual css selector
		.@{class}-@{index} {
			.spartan-grid > .spartan-apply(@mixin, @index);
		}

		// next iteration
		.spartan-grid > .spartan-loop(@index - 1, @class, @mixin);
	}

	// GRID CLASS GENERATOR
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// mixins to call inside less loop
	// use standardized global mixins - because we have them...

	.spartan-apply('grid-span', @index) {
		.grid-col-span(@index);
	}

	.spartan-apply('grid-offset', @index) {
		.grid-offset(@index);
	}

	.spartan-apply('grid-push', @index) {
		.grid-push(@index);
	}

	.spartan-apply('grid-pull', @index) {
		.grid-pull(@index);
	}
}

// GLOBAL MIXINS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// make prefixed global mixins available
// values will depend on grid type
// (either percentage or pixel)

.grid-col-span(@num: 0) when (@num >= 0) {
	.spartan-span-width(@num);
}

.grid-offset(@num: 0) {
	// use important statement to overwrite default row margin applied with shorthands
	.spartan-indent(@num) !important;
}

.grid-push(@num: 0) when (@num >= 0) {
	.spartan-push(@num);
}

.grid-pull(@num: 0) when (@num >= 0) {
	.spartan-pull(@num);
}

// LAYOUT SETUP HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// You can use the following mixins to easily set up responsive layouts.
// For grid layouts with non-equal span sizes use incrementing col-[integer] classes and apply sizes to each of these classes.
//
// .col-set([colum name], [column span width], [offset]):
// Standard mixin to set up a column in a responsive layout.
//
// To set up layouts with equal width columns you only specify the width in `.col-set-equal`.
//
// .col-set-equal([column span width]):
// Extended mixin to set up equal width columns and properly clear them at the same time
//
// Note: Every use of .col-set-equal() must be wrapped in a media query (even for smallest "mobile first" viewport).
//       Because else the `nth-child` selectors used in ` .col-set-equal()` for proper clearing would be passed on to all
//       other viewports/media queries in the layout.
//
// .col-clear([colums per line]):
// Use this to manually clear every nth column if columns differ in height.
// This ensures that a grid layout can have only [colums per line] columns on one horizontal grid line.

.grid-col-clear(@columns) when (isnumber(@columns)) {
	> .col:nth-child(@{columns}n+1) {
		clear: left;
	}
}

.grid-col-set(@col-name; @col-span) {
	// apply styles to child columns directly or to columns within child rows
	> .row > .@{col-name},
	> .@{col-name} {
		.grid-col-span(@col-span);
	}
}

.grid-col-set(@col-name; @col-span; @offset) {
	// apply styles to child columns directly or to columns within child rows
	> .row > .@{col-name},
	> .@{col-name} {
		.grid-col-span(@col-span);
		.grid-offset(@offset);
	}
}

.grid-col-set-equal(@col-span) when (isnumber(@col-span)) {
	@clear: @grid-max-cols / @col-span;

	// use default col-set mixin to generate selector
	.grid-col-set(col; @col-span);

	// with equal columns, clear every nth element for proper alignment
	.grid-col-clear(@clear);
}

// GRID CREATION API
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// generate base grid classes valid for every setup
.grid-core(@prefix: ~'') {
	// prefixed clearfix mixin from h5bp for grid only
	.grid-cf() {
		&:before,
		&:after {
			content: " ";
			display: table;
		}

		&:after {
			clear: both;
		}
	}

	// prefixed twitter bootstrap box sizing mixin
	.grid-box-sizing(@boxmodel: border-box) {
		-webkit-box-sizing: @boxmodel;
		-moz-box-sizing: @boxmodel;
		box-sizing: @boxmodel;
	}

	.grid-row-reorder() {
		> .col {
			position: relative;
		}
	}
	
	// base grid layout styles, valid for every grid setup
	.@{prefix}row,
	.@{prefix}col {
		display: block;
		margin-right: 0 !important;
		padding-right: 0 !important;
	}

	.@{prefix}row {
		.grid-cf();
		padding-left: 0 !important;

		// used to .push and .pull columns
		&.ordered {
			.grid-row-reorder();
		}
	}

	.@{prefix}col {
		// make sure we have the correct box sizing for fixed gutter grid
		.grid-box-sizing();
		float: left;
		margin-left: 0 !important;

		// spacer class for the rare occasion we have an "empty" column in a responsive grid layout
		// where the use of .offset is not possible because of realignment of columns
		&.spacer {
			min-height: 1px;
			visibility: hidden;
		}
	}
}

.grid-unlock(@grid-conf...) {
	@grid-fixed-width: extract(@grid-conf, 2);
	@grid-fixed-gutter: extract(@grid-conf, 3);
	@grid-max-cols: extract(@grid-conf, 5);

	@grid-type: extract(@grid-conf, 1);
	@grid-gutter-type: extract(@grid-conf, 4);

	@grid-precision: 4;

	// set up grid styles depending on an included config
	.spartan-grid();
}

.grid-gutter(@prefix: ~'') {
	// base row and gutter styles must be set anew
	.@{prefix}row {
		.spartan-row-indent(0) !important;
	}

	.@{prefix}col {
		// one gutter indent for each column
		.spartan-col-indent(0) !important;
		// columns should per default span the whole width if none is set
		.grid-col-span(@grid-max-cols);
	}
}

.grid-generate(@prefix: ~'') {
	// generate grid classes

	// Parameters:
	// 1) amount of iterations
	// 2) class selector prefix to generate
	// 3) mixin to apply to each selector
	//
	// Example:
	// .grid > .loop(12, class-prefix, 'mixin');
	//
	// NOTE: you can not use the generated classes themselves as mixins!

	.spartan-grid > .spartan-loop(@grid-max-cols, ~'@{prefix}col-span', 'grid-span');
	.spartan-grid > .spartan-loop(@grid-max-cols - 1, ~'@{prefix}offset', 'grid-offset');
	.spartan-grid > .spartan-loop(@grid-max-cols - 1, ~'@{prefix}push', 'grid-push');
	.spartan-grid > .spartan-loop(@grid-max-cols - 1, ~'@{prefix}pull', 'grid-pull');
}

.grid-bundle(@prefix: ~'', @spartan-config...) {
	.grid-core(@prefix);
	.grid-unlock(@spartan-config);
	.grid-gutter(@prefix);
	.grid-generate(@prefix);
}